// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

// generator prismaClassGenerator {
//     provider = "prisma-class-generator"
//     output   = "../src/generated/prisma-class"
//     dryRun                 = "false"
//     separateRelationFields = "true"
//     useUndefinedDefault    = "true"
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = "Entity"
//   fileNamingStyle                 = "camel"
// }

datasource db {
  provider = "mysql"
  url      = env("WBMS_DB_URL")
}

model Province {
  id String @id @default(uuid()) @db.Char(36)

  name String @db.VarChar(30)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  cities City[]

  @@map("provinces")
}

model City {
  id         String @id @default(uuid()) @db.Char(36)
  provinceId String @map("province_id") @db.Char(36)

  name String @db.VarChar(30)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  province Province @relation(fields: [provinceId], references: [id])

  sites     Site[]
  customers Customer[]

  @@map("cities")
}

model Image {
  id         String    @id @default(uuid()) @db.Char(36)
  path       String
  dtCreated  DateTime  @default(now()) @map("date_created")
  dtModified DateTime? @updatedAt @map("date_modified")
}

model Company {
  id      String  @id @default(uuid()) @db.Char(36)
  refType Int     @default(0) @map("ref_type") //0: WBMS, 1: eDispatch
  refId   String? @map("ref_id") @db.VarChar(50)

  code         String  @db.VarChar(50)
  codeSap      String? @map("code_sap") @db.VarChar(50)
  name         String  @db.VarChar(50)
  shortName    String? @map("short_name") @db.VarChar(50)
  address      String? @db.VarChar(250)
  addressExt   String? @map("address_ext") @db.VarChar(250)
  postalCode   String? @map("postal_code") @db.VarChar(10)
  country      String? @db.VarChar(30)
  province     String? @db.VarChar(30)
  city         String? @db.VarChar(30)
  phone        String? @db.VarChar(30)
  url          String? @db.VarChar(100)
  contactName  String? @map("contact_name") @db.VarChar(50)
  contactEmail String? @map("contact_email") @db.VarChar(30)
  contactPhone String? @map("contact_phone") @db.VarChar(30)

  isMillOperator Boolean @default(false) @map("is_mill_operator")
  isTransporter  Boolean @default(false) @map("is_transporter")
  isSiteOperator Boolean @default(false) @map("is_site_operator")
  isEstate       Boolean @default(false) @map("is_estate")

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  sites             Site[]
  transportVehicles TransportVehicle[]
  mills             Mill[]
  Driver            Driver[]
  Transaction       Transaction[]
  StorageTank       StorageTank[]

  @@map("companies")
}

model Customer {
  id              String @id @default(uuid()) @db.Char(36)
  customerTypeId  String @map("customer_type_id") @db.Char(36)
  customerGroupId String @map("customer_group_id") @db.Char(36)
  cityId          String @map("city_id") @db.Char(36)
  // barcodeTypeId   String? @db.Char(36)

  code         String  @db.VarChar(50)
  codeSap      String? @map("code_sap") @db.VarChar(50)
  name         String  @db.VarChar(50)
  shortName    String? @map("short_name") @db.VarChar(50)
  address      String? @db.VarChar(250)
  addressExt   String? @map("Address_ext") @db.VarChar(250)
  postalCode   String? @map("postal_code") @db.VarChar(10)
  phone        String? @db.VarChar(30)
  url          String? @db.VarChar(100)
  contactName  String? @map("contact_name") @db.VarChar(50)
  contactEmail String? @map("contact_email") @db.VarChar(30)
  contactPhone String? @map("contact_phone") @db.VarChar(30)
  sortasi      Float? //Decimal

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  customerType  CustomerType  @relation(fields: [customerTypeId], references: [id])
  customerGroup CustomerGroup @relation(fields: [customerGroupId], references: [id])
  city          City          @relation(fields: [cityId], references: [id])
  Transaction   Transaction[]

  // barcodeType   BarcodeType?   @relation(fields: [barcodeTypeId], references: [id])
  @@map("customers")
}

model CustomerType {
  id String @id @default(uuid()) @db.Char(36)

  name        String  @db.VarChar(50)
  shortDesc   String? @map("short_description") @db.VarChar(100)
  description String? @db.VarChar(500)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  customers Customer[]

  @@map("customer_types")
}

model CustomerGroup {
  id String @id @default(uuid()) @db.Char(36)

  name        String  @db.VarChar(50)
  shortDesc   String? @map("short_description") @db.VarChar(100)
  description String? @db.VarChar(500)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  customers Customer[]

  @@map("customer_groups")
}

model BarcodeType {
  id String @id @default(uuid()) @db.Char(36)

  name        String  @db.VarChar(50)
  shortDesc   String? @map("short_description") @db.VarChar(100)
  description String? @db.VarChar(500)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")
  // customers Customer[]

  @@map("barcode_types")
}

model Site {
  id      String  @id @default(uuid()) @db.Char(36)
  refType Int     @default(0) @map("ref_type")
  refId   String? @map("ref_id") @db.VarChar(50)

  sourceSiteId    String? @map("source_site_id") @db.Char(36)
  sourceSiteRefId String? @map("source_site_ref_id") @db.VarChar(50)
  sourceSiteName  String? @map("source_site_name") @db.VarChar(50)

  companyId    String? @map("company_id") @db.Char(36)
  companyRefId String? @map("company_ref_id") @db.VarChar(50)
  companyName  String  @map("company_name") @db.VarChar(50)

  cityId String? @map("city_id") @db.Char(36)

  code        String  @db.VarChar(50)
  codeSap     String? @map("code_sap") @db.VarChar(50)
  name        String  @db.VarChar(50)
  shortName   String? @map("short_name") @db.VarChar(50)
  description String? @db.VarChar(500)

  latitude         Float?
  longitude        Float?
  solarCalibration Int?

  isMill Boolean @default(false)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  sourceSite Site?    @relation("source_of_this_site", fields: [sourceSiteId], references: [id])
  company    Company? @relation(fields: [companyId], references: [id])
  city       City?    @relation(fields: [cityId], references: [id])

  storageTanks StorageTank[]
  weighbridges Weighbridge[]
  mills        Mill[]

  destinationSites Site[] @relation("source_of_this_site")

  originSiteTransactions      Transaction[] @relation("transactionOriginSite")
  destinationSiteTransactions Transaction[] @relation("transactionDestinationSite")

  // configs     Config[]
  @@map("sites")
}

model Mill {
  id        String @id @default(uuid()) @db.Char(36)
  siteId    String @map("site_id") @db.Char(36)
  companyId String @map("company_id") @db.Char(36)

  code String @db.VarChar(50)
  name String @db.VarChar(50)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  site    Site    @relation(fields: [siteId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("mills")
}

model Weighbridge {
  id     String @id @default(uuid()) @db.Char(36)
  siteId String @map("site_id") @db.Char(36)

  code String @db.VarChar(50)
  name String @db.VarChar(50)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  site Site @relation(fields: [siteId], references: [id])

  @@map("weighbridges")
}

enum Status {
  ACTIVE
  DISABLED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model ConfigAdminList {
  id           Int    @id @default(autoincrement())
  lvlMap       Json @map("lvl_map")
  userCreated  String?   @map("user_created") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  
  @@map("config_admin_list")
}

model ConfigApproval {
  id        String @id @default(uuid()) @db.Char(36)
  requestId String @unique @map("request_id") @db.Char(36)

  lvl1Signed String  @map("lvl_1_signed")
  lvl2Signed String? @map("lvl_2_signed")
  lvl3Signed String? @map("lvl_3_signed")

  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  request ConfigRequest @relation(fields: [requestId], references: [id])

  @@map("config_approval")
}
//jika level lebih dari 1 maka buat config Approval
model ConfigRequest {
  id       String        @id @default(uuid()) @db.Char(36)
  configId Int           @map("config_id")
  status   RequestStatus
  start    DateTime?
  end      DateTime?

  isDeleted    Boolean         @default(false) @map("is_deleted")
  userCreated  String?         @map("user_created") @db.Char(36)
  userModified String?         @map("user_modified") @db.Char(36)
  dtCreated    DateTime        @default(now()) @map("date_created")
  dtModified   DateTime?       @updatedAt @map("date_modified")
  config       Config          @relation(fields: [configId], references: [id])
  approval     ConfigApproval?

  @@map("config_requests")
}

model Config {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(100)
  description String @db.VarChar(255)
  lvlOfApprvl Int    @map("level_of_approval")
  status      Status

  isDeleted     Boolean         @default(false) @map("is_deleted")
  userCreated   String?         @map("user_created") @db.Char(36)
  userModified  String?         @map("user_modified") @db.Char(36)
  dtCreated     DateTime        @default(now()) @map("date_created")
  dtModified    DateTime?       @updatedAt @map("date_modified")
  ConfigRequest ConfigRequest[]

  @@map("configs")
}

model Notification {
  id         String    @id @default(uuid()) @db.Char(36)
  message    String
  isReaded   Boolean  @default(false)
  dtCreated  DateTime @default(now())    
}

model Profile {
  id         String    @id @default(uuid()) @db.Char(36)
  userId     String    @unique @map("user_id") @db.VarChar(36)
  name       String    @db.VarChar(50)
  profilePic String?   @map("photo") @db.VarChar(255)
  phone      String?   @db.VarChar(30)
  division   String    @db.VarChar(30)
  position   String    @db.VarChar(30)
  doB        DateTime? @map("date_of_birth")
  alamat     String?   @db.VarChar(255)

  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model User {
  id       String @id @default(uuid()) @db.Char(36)
  username String @unique @db.VarChar(30)
  email    String @unique @db.VarChar(50)
  nik      String @unique @db.VarChar(30)

  roleId         String  @db.VarChar(36) @map("role_id")
  role           String  @db.VarChar(36)
  hashedPassword String  @map("hashed_password") @db.VarChar(100)
  hashedRT       String? @map("hashed_rt") @db.VarChar(100)

  isEmailVerified Boolean @default(false) @map("is_email_verified")
  isLDAPUser      Boolean @default(false) @map("is_ldap_user")
  isDisabled      Boolean @default(false) @map("is_disabled")
  isDeleted       Boolean @default(false) @map("is_deleted")

  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")
  userRole     Role?     @relation(fields: [roleId], references: [id])
  profile      Profile?

  @@map("users")
}

model Role {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String       @unique @db.VarChar(255)
  permissions Permission[]

  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")
  users        User[]

  @@map("roles")
}

model Permission {
  id       String  @id @default(uuid()) @db.Char(36)
  resource String  @db.Char(36)
  grants   Grant[]
  roleId   String  @db.VarChar(36) @map("role_id")
  role     Role    @relation(fields: [roleId], references: [id])

  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  @@map("permissions")
}

model Grant {
  id           String      @id @default(uuid()) @db.Char(36)
  action       String
  possession   String
  attributes   Attribute[]
  permissionId String      @map("permission_id") @db.Char(36)
  permission   Permission  @relation(fields: [permissionId], references: [id])

  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  @@map("grants")
}

model Attribute {
  id      String @id @default(uuid()) @db.Char(36)
  attr    String
  grantId String @map("grant_id") @db.Char(36)
  grant   Grant  @relation(fields: [grantId], references: [id])

  @@map("attributes")
}

model Product {
  id      String  @id @default(uuid()) @db.Char(36)
  refType Int     @default(0) @map("ref_type")
  refId   String? @map("ref_id") @db.VarChar(50)

  productGroupName String?

  code          String  @db.VarChar(50)
  codeSap       String? @map("code_sap") @db.VarChar(50)
  name          String  @db.VarChar(50)
  shortName     String? @map("short_name") @db.VarChar(50)
  description   String? @db.VarChar(500)
  certification String? @db.VarChar(100)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  storageTanks           StorageTank[]
  transactions           Transaction[]
  transportVehicles      TransportVehicle[]
  otherTransportVehicles TransportVehicle[] @relation(name: "other_product")

  @@map("products")
}

model ProductGroup {
  id String @id @default(uuid()) @db.Char(36)

  name        String  @db.VarChar(50)
  shortDesc   String? @map("short_description") @db.VarChar(100)
  description String? @db.VarChar(500)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  @@map("product_groups")
}

model StorageTank {
  id      String  @id @default(uuid()) @db.Char(36)
  refType Int     @default(0) @map("ref_type")
  refId   String? @map("ref_id") @db.VarChar(50)

  siteId    String? @map("site_id") @db.Char(36)
  siteRefId String? @map("site_ref_id") @db.VarChar(50)
  siteName  String  @map("site_name") @db.VarChar(50)

  stockOwnerId    String? @map("stock_owner_id") @db.Char(36)
  stockOwnerRefId String? @map("stock_owner_ref_id") @db.VarChar(50)
  stockOwnerName  String? @map("stock_owner_name") @db.VarChar(50)

  productId    String? @map("product_id") @db.Char(36)
  productRefId String? @map("product_ref_id") @db.VarChar(50)
  productName  String? @map("product_name") @db.VarChar(50)

  code        String  @db.VarChar(50)
  codeSap     String  @map("code_sap") @db.VarChar(50)
  name        String  @db.VarChar(50)
  shortName   String? @map("short_name") @db.VarChar(50)
  description String? @db.VarChar(500)
  capacity    Float?
  height      Float?
  sccModel    Int     @default(0)

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  site       Site?    @relation(fields: [siteId], references: [id])
  stockOwner Company? @relation(fields: [stockOwnerId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])

  originSourceStorageTankTransactions    Transaction[] @relation("transactionOriginStorageTank")
  destinationSinkStorageTankTransactions Transaction[] @relation("transactionDestinationStorageTank")

  @@map("storage_tanks")
}

model Driver {
  id      String  @id @default(uuid()) @db.Char(36)
  refType Int     @default(0) @map("ref_type")
  refId   String? @map("ref_id") @db.VarChar(50)
  codeSap String  @map("code_sap") @db.VarChar(50)

  companyId    String? @map("company_id") @db.Char(36)
  companyRefId String? @map("company_ref_id") @db.VarChar(50)
  companyName  String  @map("company_name") @db.VarChar(50)

  nik     String  @unique @db.VarChar(30)
  name    String  @db.VarChar(50)
  address String? @db.VarChar(250)
  email   String? @db.VarChar(30)
  phone   String? @db.VarChar(30)

  licenseNo String?   @map("license_no") @db.VarChar(30)
  licenseED DateTime? @map("license_ed")

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  company      Company?      @relation(fields: [companyId], references: [id])
  transactions Transaction[]

  @@map("drivers")
}

model TransportVehicle {
  id      String  @id @default(uuid()) @db.Char(36)
  refType Int     @default(0) @map("ref_type")
  refId   String? @map("ref_id") @db.VarChar(50)
  codeSap String  @map("code_sap") @db.VarChar(50)

  companyId    String? @map("company_id") @db.Char(36)
  companyRefId String? @map("company_ref_id") @db.VarChar(50)
  companyName  String  @map("company_name") @db.VarChar(50)

  productId    String? @map("product_id") @db.Char(36)
  productRefId String? @map("product_ref_id") @db.VarChar(50)
  productName  String  @map("product_name") @db.VarChar(50)
  productCode  String  @map("product_code") @db.VarChar(50)

  plateNo  String  @map("plate_no") @db.VarChar(10)
  capacity Float?
  brand    String? @db.VarChar(30)
  model    String? @db.VarChar(30)
  sccModel Int     @default(0) @map("scc_model")
  notes    String? @db.VarChar(1000)

  licenseED DateTime? @map("license_ed")
  keurED    DateTime? @map("keur_ed")

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.Char(36)
  userModified String?   @map("user_modified") @db.Char(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  company      Company?  @relation(fields: [companyId], references: [id])
  product      Product?  @relation(fields: [productId], references: [id])
  extraProduct Product[] @relation(name: "other_product")
  transaction  Transaction[]

  @@map("transportation_vehicles")
}

model Transaction {
  id    String @id @default(uuid()) @db.Char(36)
  tType Int    @default(1) @map("transaction_type")

  bonTripNo      String? @map("bon_trip_no") @db.Char(16)
  vehicleStatus  Int     @default(0) @map("vehicle_status")
  deliveryStatus Int     @default(0) @map("delivery_status")
  progressStatus Int     @default(0) @map("progress_status")

  deliveryOrderId String?   @map("delivery_order_id") @db.Char(36)
  deliveryOrderNo String?   @map("delivery_order_no") @db.VarChar(50)
  deliveryDate    DateTime? @map("delivery_date")

  productId   String? @map("product_id") @db.Char(36)
  productCode String? @map("product_code") @db.VarChar(30)
  productName String? @map("product_name") @db.VarChar(50)

  customerId   String? @map("customer_id") @db.Char(36)
  customerCode String? @map("customer_code") @db.VarChar(50)
  customerName String? @map("customer_name") @db.VarChar(50)

  rspoSccModel     Int     @default(0) @map("rspo_scc_model")
  rspoUniqueNumber String? @map("rspo_unique_number") @db.VarChar(50)
  isccSccModel     Int     @default(0) @map("iscc_scc_model")
  isccUniqueNumber String? @map("iscc_unique_number") @db.VarChar(50)
  isccGhgValue     Float   @default(0) @map("iscc_ghg_value")
  isccEeeValue     Float   @default(0) @map("iscc_eee_value")

  transporterId               String? @map("transporter_id") @db.Char(36)
  transporterCompanyCode      String? @map("transporter_company_code") @db.VarChar(30)
  transporterCompanyName      String? @map("transporter_company_name") @db.VarChar(50)
  transporterCompanyShortName String? @map("transporter_company_short_name") @db.VarChar(30)

  driverId        String? @map("driver_id") @db.Char(36)
  driverNik       String? @map("driver_nik") @db.VarChar(30)
  driverName      String? @map("driver_name") @db.VarChar(50)
  driverLicenseNo String? @map("driver_license_no") @db.VarChar(30)

  transportVehicleId          String? @map("transport_vehicle_id") @db.Char(36)
  transportVehiclePlateNo     String? @map("transport_vehicle_plate_no") @db.VarChar(12)
  transportVehicleProductCode String? @map("transport_vehicle_product_code") @db.VarChar(30)
  transportVehicleProductName String? @map("transport_vehicle_product_name") @db.VarChar(50)
  transportVehicleSccModel    Int?    @default(0) @map("transport_vehicle_scc_model")

  originSiteId   String? @map("origin_site_id") @db.Char(36)
  originSiteCode String? @map("origin_site_code") @db.VarChar(30)
  originSiteName String? @map("origin_site_name") @db.VarChar(50)

  originSourceStorageTankId   String? @map("origin_source_storage_tank_id") @db.Char(36)
  originSourceStorageTankCode String? @map("origin_source_storage_tank_code") @db.VarChar(30)
  originSourceStorageTankName String? @map("origin_source_storage_tank_name") @db.VarChar(50)

  destinationSiteId   String? @map("destination_site_id") @db.Char(36)
  destinationSiteCode String? @map("destination_site_code") @db.VarChar(30)
  destinationSiteName String? @map("destination_site_name") @db.VarChar(50)

  destinationSinkStorageTankId   String? @map("destination_sink_storage_tank_id") @db.Char(36)
  destinationSinkStorageTankCode String? @map("destination_sink_storage_tank_code") @db.VarChar(30)
  destinationSinkStorageTankName String? @map("destination_sink_storage_tank_name") @db.VarChar(50)

  originFfaPercentage   Float @default(0) @map("origin_ffa_percentage")
  originMoistPercentage Float @default(0) @map("origin_moist_percentage")
  originDirtPercentage  Float @default(0) @map("origin_dirt_percentage")

  originWeighInKg           Float     @default(0) @map("origin_weigh_in_kg")
  originWeighInRemark       String?   @map("origin_weigh_in_remark") @db.VarChar(500)
  originWeighInOperatorName String?   @map("origin_weigh_in_operator_name") @db.VarChar(50)
  originWeighInTimestamp    DateTime? @map("origin_weigh_in_timestamp")

  originWeighOutKg           Float     @default(0) @map("origin_weigh_out_kg")
  originWeighOutRemark       String?   @map("origin_weigh_out_remark") @db.VarChar(500)
  originWeighOutOperatorName String?   @map("origin_weigh_out_operator_name") @db.VarChar(50)
  originWeighOutTimestamp    DateTime? @map("origin_weigh_out_timestamp")

  potonganWajib Float @default(0) @map("potongan_wajib")
  potonganLain  Float @default(0) @map("potongan_lain")

  destinationWeighInKg           Float     @default(0) @map("destination_weigh_in_kg")
  destinationWeighInRemark       String?   @map("destination_weigh_in_remark") @db.VarChar(500)
  destinationWeighInOperatorName String?   @map("destination_weigh_in_operator_name") @db.VarChar(50)
  destinationWeighInTimestamp    DateTime? @map("destination_weigh_in_timestamp")

  destinationWeighOutKg           Float     @default(0) @map("destination_weigh_out_kg")
  destinationWeighOutRemark       String?   @map("destination_weigh_out_remark") @db.VarChar(500)
  destinationWeighOutOperatorName String?   @map("destination_weigh_out_operator_name") @db.VarChar(50)
  destinationWeighOutTimestamp    DateTime? @map("destination_weigh_out_timestamp")

  returnWeighInKg           Float     @default(0) @map("return_weigh_in_kg")
  returnWeighInRemark       String?   @map("return_weigh_in_remark") @db.VarChar(500)
  returnWeighInOperatorName String?   @map("return_weigh_in_operator_name") @db.VarChar(50)
  returnWeighInTimestamp    DateTime? @map("return_weigh_in_timestamp")

  returnWeighOutKg           Float     @default(0) @map("return_weigh_out_kg")
  returnWeighOutRemark       String?   @map("return_weigh_out_remark") @db.VarChar(500)
  returnWeighOutOperatorName String?   @map("return_weigh_out_operator_name") @db.VarChar(50)
  returnWeighOutTimestamp    DateTime? @map("return_weigh_out_timestamp")

  currentSeal1 String? @map("current_seal_1") @db.VarChar(30)
  currentSeal2 String? @map("current_seal_2") @db.VarChar(30)
  currentSeal3 String? @map("current_seal_3") @db.VarChar(30)
  currentSeal4 String? @map("current_seal_4") @db.VarChar(30)

  loadedSeal1         String?   @map("loaded_seal_1") @db.VarChar(30)
  loadedSeal2         String?   @map("loaded_seal_2") @db.VarChar(30)
  loadedSeal3         String?   @map("loaded_seal_3") @db.VarChar(30)
  loadedSeal4         String?   @map("loaded_seal_4") @db.VarChar(30)
  loadingRemark       String?   @map("loading_remark") @db.VarChar(500)
  loadingOperatorName String?   @map("loading_operator_name") @db.VarChar(50)
  loadingTimestamp    DateTime? @map("loading_timestamp")

  unloadedSeal1         String?   @map("unloaded_seal_1") @db.VarChar(30)
  unloadedSeal2         String?   @map("unloaded_seal_2") @db.VarChar(30)
  unloadedSeal3         String?   @map("unloaded_seal_3") @db.VarChar(30)
  unloadedSeal4         String?   @map("unloaded_seal_4") @db.VarChar(30)
  unloadingRemark       String?   @map("unloading_remark") @db.VarChar(500)
  unloadingOperatorName String?   @map("unloading_operator_name") @db.VarChar(50)
  unloadingTimestamp    DateTime? @map("unloading_timestamp")

  returnUnloadedSeal1         String?   @map("return_unloaded_seal_1") @db.VarChar(30)
  returnUnloadedSeal2         String?   @map("return_unloaded_seal_2") @db.VarChar(30)
  returnUnloadedSeal3         String?   @map("return_unloaded_seal_3") @db.VarChar(30)
  returnUnloadedSeal4         String?   @map("return_unloaded_seal_4") @db.VarChar(30)
  returnUnloadingRemark       String?   @map("return_unloading_remark") @db.VarChar(500)
  returnUnloadingOperatorName String?   @map("return_unloading_operator_name") @db.VarChar(50)
  returnUnloadingTimestamp    DateTime? @map("return_unloading_timestamp")
  qtyTbs                      Int?      @default(0) @map("qty_tbs")
  qtyTbsDikirim               Int?      @default(0) @map("qty_tbs_dikirim")
  qtyTbsDikembalikan          Int?      @default(0) @map("qty_tbs_dikembalikan")

  jsonData Json?

  isDeleted    Boolean   @default(false) @map("is_deleted")
  userCreated  String?   @map("user_created") @db.VarChar(36)
  userModified String?   @map("user_modified") @db.VarChar(36)
  dtCreated    DateTime  @default(now()) @map("date_created")
  dtModified   DateTime? @updatedAt @map("date_modified")

  product     Product?  @relation(fields: [productId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  transporter Company?  @relation(fields: [transporterId], references: [id])
  transportVehicle TransportVehicle?  @relation(fields: [transportVehicleId], references: [id])
  driver      Driver?   @relation(fields: [driverId], references: [id])

  originSite      Site? @relation(fields: [originSiteId], references: [id], name: "transactionOriginSite")
  destinationSite Site? @relation(fields: [destinationSiteId], references: [id], name: "transactionDestinationSite")

  originSourceStorageTank    StorageTank? @relation("transactionOriginStorageTank", fields: [originSourceStorageTankId], references: [id])
  destinationSinkStorageTank StorageTank? @relation("transactionDestinationStorageTank", fields: [destinationSinkStorageTankId], references: [id])

  @@map("transactions")
}
