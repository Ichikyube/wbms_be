
    // model Permission  {
    //   id          String @id @default(uuid()) @db.Char(36)
    //   action      Action
    //   possesion   Possession
    //   attributes   String
    //   role_permission_id Int
    //   role_permission RolePermission   @relation(fields: [role_permission_id], references: [id])
    
    // role: {
    //   resource: {action, attributes},
    // let resource = {
    //   storageTanks: ['read', 'write'],
    //   mills: ['read'],
    // };

    //jika role belum ada, maka data yg dibutuhkan untuk membuat role adalah, jika selain nama ada data onlyRead maka rolePermission=[read:own] 
    // atau FULL maka rolePermission=[  'read:own','create:own','update:own','delete:own',] lalu buat rolePermission berdasarkan MainSite
    // if (!role) {

    //   if (data.permissions)
    //     params.data.permissions = await this.permissionService.findMany(
    //       data.permissions,
    //     );
    //   role = await this.roleRepository.save(role);
    // }

    //jadi begini


const permissions = await this.db.permission.create({
      data: {
        action: 'onlyRead',
        attributes: '*',
        possesion: 'ANY',
        userCreated: 'T',
        userModified: 't',
      },
    });
    const rolePermissione = await this.db.rolePermission.create({
      data: {
        resource: 5,
        permissions: {
          create: [
            {
              action: 'onlyRead',
              attributes: '*',
              possesion: 'ANY',
              userCreated: 'T',
              userModified: 't',
            },
          ],
        },
        userCreated: 'string',
        userModified: 'string',
      },
    });
    const roles = await this.db.role.create({
      data: {
        name,
        rolePermission: {
          create: [
            {
              resourceId: 5,
              permissions: {
                create: [
                  {
                    action: 'onlyRead',
                    attributes: '*',
                    possesion: 'ANY',
                    userCreated: 'T',
                    userModified: 't',
                  },
                ],
              },
            }
          ]
        },
      }
    })








    
// async update(updateRoleInput: UpdateRoleInput) {
//   let role = await this.roleRepository.findOne({ id: updateRoleInput.id });
//   if (!role) {
//     throw new HttpException('Item does not exist!', HttpStatus.NOT_FOUND);
//   }
//   role.name = updateRoleInput.name;
//   if (updateRoleInput.permissions)
//     role.permissions = await this.permissionService.findMany(
//       updateRoleInput.permissions,
//     );
//   return this.roleRepository.save(role);
// }

// async remove(id: number) {
//   let role = await this.roleRepository.findOne({ id });
//   if (!role) {
//     throw new HttpException('Item does not exist!', HttpStatus.NOT_FOUND);
//   }
//   return await this.roleRepository.remove(role);
// }

// async getRolePermissions(id: number) {
//   let user = await this.roleRepository.findOne({
//     where: { id },
//     relations: ['permissions'],
//   });
//   return user.permissions;
// }
// }

// async findAllAsMap(): Promise<Map<string, Role>> {
//   const entities = await this.db.role.findMany();

//   const rolesMap: Map<string, Role> = new Map();
//   entities.forEach((entity) => {
//     rolesMap.set(entity.name, entity);
//   });

//   return rolesMap;
// }
