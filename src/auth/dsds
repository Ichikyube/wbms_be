
//@desc Login user
//@route POST /api/users/login
//@access public
exports.loginUser = asyncHandler(async (req, res) => {
    const {
        email,
        password
    } = req.body;
    if (!email || !password) {
        return res.status(422).send({
            error: 'You must provide username and password!'
        });
    }
    // try {
    //     const user = await User.login(email, password);
    // } catch (err) {
    //     const errors = handleErrors(err);
    //     res.status(400).json({
    //         errors
    //     });
    // }
    const user = await User.findOne({
        email: email
    });
    //compare password with hashedpassword
    if (user && user.validatePassword(password)) {
        //     const token = createToken(user._id);
        //     res.cookie('jwt', token, {
        //         httpOnly: true,
        //         maxAge: maxAge * 1000
        //     });
        //     res.status(200).json({
        //         user: user._id
        //     });
        // req.session.userId = user._id
        // res.redirect('/')
        const accessToken = createAccessToken(user);
        res.status(200).json({
            accessToken
        });
    } else {
        // console.log("/auth/login::", user)
        // res.redirect('/auth/login')
        res.status(401).json({
            message: 'Invalid username or password'
        });
    }
});

// controller actions
module.exports.register = (req, res) => {
    res.render('signup');
}

//@desc Register a user
//@route POST /api/users/register
//@access public
module.exports.registerUser = asyncHandler(async (req, res, next) => {
    const {
        username,
        email,
        password
    } = req.body;
    if (!username || !email || !password) {
        return res.status(422).json({
            message: 'All field are required'
        });
    }
    const userAvailable = await User.findOne({
        email
    });
    if (userAvailable) {
        res.status(400);
        throw new Error("User already registered!");
    }
    //Check for duplicate
    User.findOne({
        $or: [{
            email
        }, {
            username
        }]
    }, function (err, existingUser) {
        if (err) {
            return next(err);
        }
        if (existingUser) {
            req.flash("error", "Username or Email already exists");
            // res.status(422).json({
            //     error: "Username or Email already exists"
            // });
            return res.redirect("/signup");
        }
    }).lean().exec();
    // If a user with email and username are unique, Save this User to Database
    const newUser = await User.create({
            username,
            email,
            password: await bcrypt.hash(password, 10)
        })
        .then(user => {
            if(!user) {
                res.status(400);
                throw new Error("User data us not valid");
            }
            //     res.status(201).json({
            //         _id: user.id,
            //         email: user.email
            //     });
            if (req.body.roles) {
                Role.findAll({
                    where: {
                        name: {
                            [Op.or]: req.body.roles
                        }
                    }
                }).then(roles => {
                    user.setRoles(roles).then(() => {
                        res.send({
                            status: 'success',
                            message: `User ${username} was registered as ${req.body.roles} successfully!`,
                            data: {
                                user: newUser,
                                token: token.generateToken(savedUser)
                            }
                        });
                    });
                });
            } else {
                // user role = 1
                user.setRoles([1]).then(() => {
                    res.status(201).json({
                        status: 'success',
                        message: `User ${username} was registered successfully!`,
                        data: {
                            user: newUser,
                            token: token.generateToken()
                        }
                    });
                });

            }
            // res.json({ success:true });
            const token = createToken(user._id);
            res.cookie('jwt', token, {
                httpOnly: true,
                maxAge: maxAge * 1000
            });
            res.status(201).json({
                user: user._id
            });
            res.redirect('/')
        })
        .catch(err => {
            // const errors = handleErrors(err);
            // res.status(400).json({
            //     errors
            // });
            // res.status(500).send({
            //     message: err.message
            // });
            const validationErrors = Object
                .keys(err.errors)
                .map(key => err.errors[key].message)
            //req.session.validationErrors = validationErrors
            req.flash('validationErrors', validationErrors)
            req.flash('data', req.body)

            return res.redirect('/auth/register')
        });

});